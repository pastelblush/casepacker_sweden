<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.2">
  <POU Name="HOR_Origin" Id="{875af801-b3bc-4ffd-8186-9524d1083bcd}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM HOR_Origin
VAR_IN_OUT
	Station		:structStationCtrl;
END_VAR
VAR
	HOR_WA_Origin		:BOOL;
	pls_OriginSchRun	:R_trig;
	Timeout				:Ton;
	TmrCartonExit		:Ton;
	TimeoutTrigger		:BOOL;
	TimeoutSetting		:TIME;
	tmr_FullSensorDly	:TON;
	tmr_MtrStopped		:ton;
		
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(**************************************************************************************************************)
(* Station Width Adjust in Origin Condition *)
(**************************************************************************************************************)
HOR_WA_Origin := 	TRUE ;

(**************************************************************************************************************)
(* Station Origin Condition *)
(**************************************************************************************************************)

Station.Origin 	:=	(
					(NOT I_HOR_Entry_Cv_Present OR H_ER_CtnGlueDone) AND
					HOR_BotCv_Mtr_Var.S_InvRdy AND
					HOR_TopCv_Mtr_Var.S_InvRdy AND
					HOR_WA_Origin AND
					(*EX_Tilt_Srv_Var.Out_Referenced AND*)
					tmr_MtrStopped.Q and
					Station.OriginRunStep =0)OR
					Station.Bypass;
					 		
(**************************************************************************************************************)
(* Individual Station Origin Run Trigger *)
(**************************************************************************************************************)
IF MC.ManualMode AND NOT Station.Origin AND NOT (Station.MajorFault OR Station.MinorFault OR MC.Trouble OR MC.StopPressed )  THEN
	IF Station.T_OriginSearch THEN
		Station.OriginSchRun  := TRUE;
	END_IF;
ELSE
	Station.OriginSchRun := FALSE;
	HOR.T_OriginSearch := FALSE;
END_IF;

(**************************************************************************************************************)
(* Station Origin Step *)
(**************************************************************************************************************)

Timeout(IN:=TimeoutTrigger, PT:=TimeoutSetting);
IF Timeout.Q THEN
	TimeoutTrigger := FALSE;
END_IF

pls_OriginSchRun(CLK:= (MC.OriginSchRun OR Station.OriginSchRun));
TmrCartonExit (in:= NOT I_HOR_DnStream_Cv_Full AND NOT I_HOR_Entry_Cv_Present  AND (Station.OriginRunStep = 30), pt:=T#10S);
tmr_FullSensorDly (IN:= (Station.OriginRunStep >= 30) AND I_HOR_DnStream_Cv_Full, PT:= T#3S);
tmr_MtrStopped( IN:= NOT HOR_BotCv_Mtr_Var.S_Running AND NOT HOR_TopCv_Mtr_Var.S_Running , pt:= T#2S);

IF (MC.OriginSchRun OR Station.OriginSchRun) AND NOT Station.Bypass  THEN
	CASE Station.OriginRunStep OF

	0 : 	(************* Ready To Run ****************)
			IF NOT Station.Origin AND pls_OriginSchRun.Q THEN
				Station.OriginRunStep := Station.OriginRunStep+10;	
			END_IF

	10	:	(************* Clear Tilt In and Tilt Out Conveyor ****************)
			Station.Status := 'Org10: Tilt Conveyor In and Out Run';
			
			HOR_Tilt_In_Mtr_Var.In_OrgOn	:= TRUE;
			HOR_Tilt_Out_Mtr_Var.In_OrgOn	:= TRUE;

			IF NOT I_HOR_Tilt_Out_Cv_Present THEN
				Station.OriginRunStep := Station.OriginRunStep+30;
			END_IF
			(*temporarily disable referencing*)
			
	20:		(************ Tilt Unit Origin **********************)
			Station.Status := 'Org20: Tilt Servo Start to Home';
			
			EX_Tilt_Srv_Var.In_SetAbsRef	:= TRUE;
			
			IF NOT EX_Tilt_Srv_Var.Out_Referenced THEN
				Station.OriginRunStep	:= Station.OriginRunStep + 10;
			END_IF
	
	30: (***************** Waiting for Tilt Unit Origin Done ************)
			Station.Status := 'Org30: Tilt Servo Homing';
		
			IF  EX_Tilt_Srv_Var.Out_Referenced THEN
				EX_Tilt_Srv_Var.In_SetAbsRef	:= FALSE;
				Station.OriginRunStep	:= Station.OriginRunStep + 10;
			END_IF
		
	40 : 	(************* Cek Carton On Conveyor ****************)
			Station.Status := 'Org40: Cek Carton On Conveyor';
			HOR_BotCv_Mtr_Var.In_OrgOn	:= TRUE;
			HOR_TopCv_Mtr_Var.In_OrgOn	:= TRUE;
			EX_StpCylR_Var.In_OrgHome	:= TRUE;
			EX_StpCylL_Var.In_OrgHome	:= TRUE;
			
			IF I_HOR_Entry_Cv_Present THEN
				Station.Status := 'Org10: Top and Bottom Motor Run';
			ELSE
				Station.OriginRunStep := Station.OriginRunStep+10;
			END_IF
	
	50 : 	(************* Carton Send to Exit Conveyor  ****************)
			Station.Status 		:= 'Org50: Carton Send to Exit Conveyor';
			
			
			IF NOT I_HOR_Entry_Cv_Present THEN
				Station.OriginRunStep	:= Station.OriginRunStep + 10;
			END_IF

	60 : 	(************* Carton Send to Exit Conveyor  ****************)
			Station.Status 		:= 'Org60: Carton Send to Exit Conveyor';
			Station.StatusInt	:= 354;
			
			H_ER_CtnRdyForGlue	:=FALSE;
			H_ER_CtnGlueDone	:=FALSE;
			H_ER_CtnWeightOK	:=FALSE;				

			IF  tmr_FullSensorDly.Q OR TmrCartonExit.q THEN

				EX_StpCylR_Var.In_Orgwork	:= TRUE;
				EX_StpCylL_Var.In_Orgwork	:= TRUE;
				EX_StpCylR_Var.In_OrgHome	:= FALSE;
				EX_StpCylL_Var.In_OrgHome	:= FALSE;
				Station.OriginRunStep 		:= 40;
			END_IF

	70:	(******************** Make sure Conveyor is stopped **********************)
				HOR_BotCv_Mtr_Var.In_OrgOn 		:= FALSE;
				HOR_TopCv_Mtr_Var.In_OrgOn		:= FALSE;
				HOR_BotCv_Mtr_Var.T_ManOn 		:= FALSE;
				HOR_TopCv_Mtr_Var.T_ManOn		:= FALSE;	
				HOR_Tilt_In_Mtr_Var.In_OrgOn	:= FALSE;
				HOR_Tilt_Out_Mtr_Var.In_OrgOn	:= FALSE;				
			
		IF  tmr_MtrStopped.Q THEN
				Station.OriginRunStep 		:= 0;
			END_IF
		
	END_CASE

ELSE

	Station.OriginRunStep := 0;	

	
END_IF
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>