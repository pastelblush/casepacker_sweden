<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4018.2">
  <POU Name="CO_XPush_Origin" Id="{ab94354f-2b88-4d2c-a648-13f7cb2c85c5}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CO_XPush_Origin
VAR_IN_OUT
	Station		:structStationCtrl;
END_VAR
VAR
	CO_XPush_WA_Origin: BOOL;
	pls_OriginSchRun: R_trig;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*

(**************************************************************************************************************)
(* Station Width Adjust in Origin Condition *)
(**************************************************************************************************************)
CO_XPush_WA_Origin := TRUE ;

(**************************************************************************************************************)
(* Station Origin Condition *)
(**************************************************************************************************************)

H_CO_XPush_Srv_CurrStandbyPos := H_CO_XPush_Srv_HomePos ;

Station.Origin 	:=	(CO_XPush_WA_Origin AND 
					CO_XPush_Cyl_Var.S_HomePos AND
					(((fcComparePos(CurrPos:= CO_XPush_Srv_Var.Out_CurrPos, TargetPos:= H_CO_XPush_Srv_CurrStandbyPos, Tolerance := 0.5)) AND
							CO_XPush_Srv_Var.Out_InPos AND CO_XPush_Srv_Var.Out_Ready))) OR
					Station.Bypass
					;
					 		
(**************************************************************************************************************)
(* Station Origin Step *)
(**************************************************************************************************************)

pls_OriginSchRun(CLK:= (MC.OriginSchRun OR Station.OriginSchRun));

IF (MC.OriginSchRun OR Station.OriginSchRun) AND NOT Station.Bypass   THEN
	CASE Station.OriginRunStep OF

	0 : 	(************* Ready To Run ****************)
			IF NOT Station.Origin AND pls_OriginSchRun.Q THEN
				Station.OriginRunStep := Station.OriginRunStep+10;	
			END_IF

	10 : 	(************* Check Sensors Before Homing ****************)
			Station.Status 		:= 'Org10: Check Sensors Before Homing';
			Station.StatusInt	:= 120;
	
			Station.OriginRunStep := Station.OriginRunStep+10;
			
	20 : 	(************* ****************)
	

					Station.OriginRunStep := Station.OriginRunStep+10;	

			
	30 : 	(************* X Pusher Cylinder Up ****************)
			Station.Status 		:= 'Org30: X Pusher Cylinder Up';
			Station.StatusInt	:= 104;
	
			IF NOT CO_XPush_Cyl_Var.S_WorkPos THEN
				CO_XPush_Cyl_Var.In_OrgWork := TRUE;
			ELSE
				CO_XPush_Cyl_Var.In_OrgWork := FALSE;
				Station.OriginRunStep := Station.OriginRunStep+10;	
			END_IF

	40 : 	(************* X Pusher Servo Move to Home Pos ****************)
			Station.Status 		:= 'Org40: X Pusher Servo Move to Home Pos';
			Station.StatusInt	:= 106;
	
			CO_XPush_Srv_Var.In_PosCmd := H_CO_XPush_Srv_CurrStandbyPos; 
			CO_XPush_Srv_Var.In_VelCmd := A_Srv_BeltAutoHiSpeed;
			CO_XPush_Srv_Var.In_MoveAbs := TRUE;

			IF ((fcComparePos(CurrPos:= CO_XPush_Srv_Var.Out_CurrPos, TargetPos:= CO_XPush_Srv_Var.In_PosCmd, Tolerance := 0.5) AND
				CO_XPush_Srv_Var.Out_InPos AND CO_XPush_Srv_Var.Out_Ready) AND
							CO_XPush_Srv_Var.Out_InPos) THEN			
				CO_XPush_Srv_Var.In_MoveAbs := FALSE;
				Station.OriginRunStep := Station.OriginRunStep+10;	
			END_IF
			
	50 : 	(************* X Pusher Cylinder Down ****************)
			Station.Status 		:= 'Org50: X Pusher Cylinder Down';
			Station.StatusInt	:= 107;			
	
			IF NOT CO_XPush_Cyl_Var.S_HomePos THEN
				CO_XPush_Cyl_Var.In_OrgHome := TRUE;
			ELSE
				CO_XPush_Cyl_Var.In_OrgHome := FALSE;
				Station.OriginRunStep := 0;	
			END_IF
			
	END_CASE

ELSE

	Station.OriginRunStep := 0;	
	
END_IF
*)]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>